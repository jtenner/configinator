// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parser F flag default value: F flag default values 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser F flag default value: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser F flag default value: files - file 0 1`] = `"a"`;

exports[`parser F flag default value: files - file 1 1`] = `"b"`;

exports[`parser G flag default value: G flag default values 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser G flag default value: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser G flag default value: file - glob 0 1`] = `"a"`;

exports[`parser G flag default value: file - glob 1 1`] = `"b"`;

exports[`parser already provided flags: already provided flag 1`] = `
Object {
  "diagnostics": Array [
    "Invalid CLI argument '--test': Option already provided",
  ],
}
`;

exports[`parser array of numbers default value when default value is an array, but also incorrect: array of numbers wrong type 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option \`--test\`: Default value is type 'String', expected 'Number'",
    "Invalid configuration option \`--test\`: Default value is type 'String', expected 'Number'",
    "Invalid configuration option \`--test\`: Default value is type 'String', expected 'Number'",
  ],
}
`;

exports[`parser array of numbers default value: validate array of numbers 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option '--config': Option type 'b' is invalid, expected 'R'",
    "Invalid configuration option \`--test\`: Default value is type 'String', expected 'Array'",
  ],
}
`;

exports[`parser array of numbers option: config - module 1`] = `
Object {
  "options": Object {
    "test": Array [
      1,
      2,
      99,
    ],
  },
}
`;

exports[`parser array of numbers option: test 1`] = `
Array [
  1,
  2,
  99,
]
`;

exports[`parser array of numbers option: test array of numbers 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser array of string default value when default value is an array, but also incorrect: array of strings wrong type 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option \`--test\`: Default value is type 'Number', expected 'String'",
    "Invalid configuration option \`--test\`: Default value is type 'Number', expected 'String'",
    "Invalid configuration option \`--test\`: Default value is type 'Number', expected 'String'",
  ],
}
`;

exports[`parser array of strings default value: validate array of strings 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option '--config': Option type 'b' is invalid, expected 'R'",
    "Invalid configuration option \`--test\`: Default value is type 'Number', expected 'Array'",
  ],
}
`;

exports[`parser array of strings option: config - module 1`] = `
Object {
  "options": Object {
    "test": Array [
      "one",
      "two",
      "three",
    ],
  },
}
`;

exports[`parser array of strings option: test 1`] = `
Array [
  "one",
  "two",
  "three",
]
`;

exports[`parser array of strings option: test array of strings 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser bad config flag type: bad config flag type 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option '--config': Option type 'b' is invalid, expected 'R'",
  ],
}
`;

exports[`parser bad option flag type: bad option flag type 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option '--bad': Option type 'z' is invalid",
  ],
}
`;

exports[`parser boolean option: config - module 1`] = `
Object {
  "options": Object {
    "test": true,
  },
}
`;

exports[`parser boolean option: test 1`] = `true`;

exports[`parser boolean option: test booleans 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser config is not an object: config - module 1`] = `42`;

exports[`parser config is not an object: config is not an object 1`] = `
Object {
  "diagnostics": Array [
    "Invalid Configuration at 'src/__test_files__/config.not_an_object.js': Must be an object",
  ],
}
`;

exports[`parser config is required: config required 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option '--config': '--config' is always required in user defined definitions",
  ],
}
`;

exports[`parser duplicate aliases: duplicate alias 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option '--duplicate': Option '--config' already has alias '-c'",
  ],
}
`;

exports[`parser executable type flag: validate executable flag 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option '--config': Option type 'b' is invalid, expected 'R'",
    "Invalid configuration option \`--test\`: Default value is type 'Number', expected 'Function'",
  ],
}
`;

exports[`parser extends is not a string: config - module 1`] = `
Object {
  "extends": 42,
  "options": Object {},
}
`;

exports[`parser extends is not a string: config extends number 1`] = `
Object {
  "diagnostics": Array [
    "Invalid Configuration at 'src/__test_files__/config.extends_number.js': Property 'extends' must be 'String', received 'Number'",
  ],
}
`;

exports[`parser f flag default value: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser f flag default value: f flag default values 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser f flag default value: file - file 1`] = `"a"`;

exports[`parser flag that requires another argument in the wrong position: not passing an argument to a flag that requires another argument 1`] = `
Object {
  "diagnostics": Array [
    "Invalid CLI argument '--test': Argument missing",
  ],
}
`;

exports[`parser function default value: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser function default value: test 1`] = `[Function]`;

exports[`parser function default value: test function default value 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser function option: config - module 1`] = `
Object {
  "options": Object {
    "test": [Function],
  },
}
`;

exports[`parser function option: test 1`] = `[Function]`;

exports[`parser function option: test functions 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser g flag default value: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser g flag default value: f flag default values 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser g flag default value: file - glob 0 1`] = `"a"`;

exports[`parser g flag default value: file - glob 1 1`] = `"b"`;

exports[`parser invalid boolean value: invalid boolean default value 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option \`--test\`: Default value is type 'String', expected 'Boolean'",
  ],
}
`;

exports[`parser invalid config option: config - module 1`] = `
Object {
  "options": Object {
    "invalidOption": 1,
  },
}
`;

exports[`parser invalid config option: invalid option config 1`] = `
Object {
  "diagnostics": Array [
    "Invalid Configuration Option at 'src/__test_files__/config.invalid_option.js': Property 'invalidOption' is invalid",
  ],
}
`;

exports[`parser n flag default value: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser n flag default value: n flag default values 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser n flag default value: num 1`] = `50`;

exports[`parser null configs: config - module 1`] = `null`;

exports[`parser null configs: null config 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser number type flag: validate number flag 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option '--config': Option type 'b' is invalid, expected 'R'",
    "Invalid configuration option \`--test\`: Default value is type 'String', expected 'Number'",
  ],
}
`;

exports[`parser number type flag: validate string flag 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option '--config': Option type 'b' is invalid, expected 'R'",
    "Invalid configuration option \`--test\`: Default value is type 'Number', expected 'String'",
  ],
}
`;

exports[`parser o and e flags can't be passed via argv: o and e flags 1`] = `
Object {
  "diagnostics": Array [
    "Invalid CLI argument '--e': option has type 'e' and cannot be passed via argv",
    "Invalid CLI argument '--o': option has type 'o' and cannot be passed via argv",
  ],
}
`;

exports[`parser object option: config - module 1`] = `
Object {
  "options": Object {
    "test": Object {
      "a": "A",
      "b": "B",
      "c": "C",
    },
  },
}
`;

exports[`parser object option: test 1`] = `
Object {
  "a": "A",
  "b": "B",
  "c": "C",
}
`;

exports[`parser object option: test objects 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser obtaining a config that doesn't exist should return null: R diagnostics 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser obtaining a config that doesn't exist should return null: config - module 1`] = `null`;

exports[`parser obtaining file array values: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser obtaining file array values: file - file 0 1`] = `"a"`;

exports[`parser obtaining file array values: file - file 1 1`] = `"b"`;

exports[`parser obtaining file array values: file values 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser obtaining file values: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser obtaining file values: file - file 1`] = `"a"`;

exports[`parser obtaining file values: file value 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser obtaining files via glob array: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser obtaining files via glob array: file - glob 0 1`] = `"a"`;

exports[`parser obtaining files via glob array: file - glob 1 1`] = `"b"`;

exports[`parser obtaining files via glob array: glob values 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser obtaining files via glob: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser obtaining files via glob: file - glob 0 1`] = `"a"`;

exports[`parser obtaining files via glob: file - glob 1 1`] = `"b"`;

exports[`parser obtaining files via glob: glob values 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser obtaining module via R flag: R diagnostics 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser obtaining module via R flag: config - module 1`] = `
Object {
  "options": Object {
    "val": 42,
  },
}
`;

exports[`parser obtaining module via R flag: val 1`] = `42`;

exports[`parser obtaining number via n flag: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser obtaining number via n flag: num 1`] = `1`;

exports[`parser obtaining number via n flag: num diagnostics 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser obtaining numbers via N flag: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser obtaining numbers via N flag: num diagnostics 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser obtaining numbers via N flag: nums 1`] = `
Array [
  1,
  2,
  3,
]
`;

exports[`parser obtaining regex via r flag: R diagnostics 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser obtaining regex via r flag: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser obtaining regex via r flag: val 1`] = `/\\.\\*/`;

exports[`parser options is not an object: config - module 1`] = `
Object {
  "options": 42,
}
`;

exports[`parser options is not an object: config options number 1`] = `
Object {
  "diagnostics": Array [
    "Invalid Configuration at 'src/__test_files__/config.options_number.js': Property 'options' must be 'Object', received 'Number'",
  ],
}
`;

exports[`parser options must match names: option names must match 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option '--test': Option key 'test' does not match name 'not-test'",
  ],
}
`;

exports[`parser parsing string array argument missing, next is a flag: array parameter with argument missing, next is a flag 1`] = `
Object {
  "diagnostics": Array [
    "Invalid CLI argument '--test': Argument missing",
  ],
}
`;

exports[`parser parsing string array argument missing: array parameter with argument missing 1`] = `
Object {
  "diagnostics": Array [
    "Invalid CLI argument '--test': Argument missing",
  ],
}
`;

exports[`parser parsing string array error: string array arguemnts invalid 1`] = `
Object {
  "diagnostics": Array [
    "Invalid CLI argument '--test': Argument missing",
  ],
}
`;

exports[`parser parsing string array success: string array success 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser parsing true and false strings: config - module 1`] = `null`;

exports[`parser parsing true and false strings: parsing true and false strings with boolean flags 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser parsing true and false strings: test1 1`] = `"true"`;

exports[`parser parsing true and false strings: test2 1`] = `"false"`;

exports[`parser regex default value: config - module 1`] = `
Object {
  "options": Object {},
}
`;

exports[`parser regex default value: test 1`] = `/\\.\\*/`;

exports[`parser regex default value: test regex default value 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser regex option: config - module 1`] = `
Object {
  "options": Object {
    "test": /\\.\\*/,
  },
}
`;

exports[`parser regex option: test 1`] = `/\\.\\*/`;

exports[`parser regex option: test regex 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser rest args: rest args 1`] = `
Object {
  "rest": Array [
    "rest!",
    "one",
    "two",
    "three",
  ],
}
`;

exports[`parser simple arguments: simple argument 1`] = `
Object {
  "args": Array [
    "arg1",
  ],
  "diagnostics": Array [],
}
`;

exports[`parser string option: config - module 1`] = `
Object {
  "options": Object {
    "test": "a string",
  },
}
`;

exports[`parser string option: test 1`] = `"a string"`;

exports[`parser string option: test strings 1`] = `
Object {
  "diagnostics": Array [],
}
`;

exports[`parser string parameters fail: string arguments fail 1`] = `
Object {
  "diagnostics": Array [
    "Invalid CLI argument '--test': Argument missing",
  ],
}
`;

exports[`parser string parameters: string arguments 1`] = `
Object {
  "diagnostics": Array [],
  "values": Map {
    Object {
      "name": "config",
      "type": "R",
    } => Object {
      "providedBy": 0,
      "value": null,
    },
    Object {
      "name": "test",
      "type": "s",
    } => Object {
      "providedBy": 2,
      "value": "this should work",
    },
  },
}
`;

exports[`parser unknown flags passed via argv: unknown flag 1`] = `
Object {
  "diagnostics": Array [
    "Invalid CLI argument 'unknown': Option is not valid",
  ],
}
`;

exports[`parser when regex option default is not regex: regex default value error 1`] = `
Object {
  "diagnostics": Array [
    "Invalid configuration option \`--test\`: Default value is type 'Number', expected 'RegExp'",
  ],
}
`;
